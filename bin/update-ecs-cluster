#!/bin/bash
source "$(dirname $(readlink $0))/aws-helpers.sh"

asg=EC2ContainerService-be-ecs-cluster-EcsInstanceAsg-12A1SMUHOBMHM

main() {
  case $1 in
    --non-interactive)
      confirm() {
        true
      }
      update_cluster
      ;;
    --help|-h)
      usage
      ;;
    *)
      update_cluster
      ;;
  esac
}

usage() {
  echo "Usage:"
  echo "  $0 [options]"
  echo
  echo "Options:"
  echo "  --non-interactive # Don't ask confirmation of updates."
  echo "                    # Automatically roll over entire cluster."
  echo "  --help, -h        # Display this help message."
}

update_cluster() {
  for instance in $(asg_running_instance_ids $asg); do
    detach_and_replace $instance $asg "Detach, replace & drain ${instance}?" && drain $instance \
      && terminate $instance
  done
}

drain() {
  echo -n "Draining ${instance}."
  aws ecs update-container-instances-state \
    --cluster be-ecs-cluster \
    --container-instances $(container_instance_arn ${instance}) \
    --status 'DRAINING' > /dev/null

  tasks_running=1
  while [ $tasks_running -gt 0 ]; do
    tasks_running=$(running_task_count $instance)
    printf "\rDraining ${instance}. ${tasks_running} tasks remaining..."
    sleep 10
  done
}

running_task_count() {
  aws ecs describe-container-instances --output text \
    --cluster be-ecs-cluster \
    --container-instances $(container_instance_arn ${1}) \
    --query 'containerInstances[*].runningTasksCount'
  }

container_instance_arn() {
  aws ecs list-container-instances --output text \
    --cluster be-ecs-cluster \
    --filter "ec2InstanceId == ${1}" \
    --query 'containerInstanceArns[*]'
  }

main $@
