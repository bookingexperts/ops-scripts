#!/bin/bash
admin_email='admin@bookingexperts.nl'
webroot='/usr/share/nginx/html'
nginx_dir=/mnt/nginx
le_dir=/mnt/letsencrypt
redirector_ip='52.58.34.119'

if [ -n "${STAGING}" ]; then
  staging="--staging"
fi

function main() {
  case $1 in
    renew|'')
      if [ -n "${2}" ]; then
        renew $2
      else
        renew_all
      fi
      ;;
    setup)
      setup
      ;;
    add)
      add $2
      ;;
    remove)
      delete $2
      ;;
    validate|validate-nginx)
      validate_config
      ;;
    reload|reload-nginx)
      validate_config && reload_config
      ;;
    clean|cleanup)
      clean
      ;;
    backup)
      backup
      ;;
    help|*)
      usage
      ;;
  esac
}

function usage() {
  echo "Usage: $0 [renew]           # Renew all certificates"
  echo "       $0 renew domain      # Force renewal for given domain."
  echo "       $0 add domain        # Request a certificate for given domain and configure it."
  echo "       $0 validate[-nginx]  # Validate the nginx config"
  echo "       $0 reload[-nginx]    # Validate & reload the nginx config if valid"
  echo "       $0 clean[up]         # Remove expired certificates and backups older than 30 days"
  echo "       $0 remove domain     # Delete a certificate & remove its config"
  echo "       $0 backup            # Backup all configs & certificates"
  echo "       $0 setup             # Setup the LE account & generate DH params"
  echo ""
  echo "Note on wildcard domains:"
  echo "Wildcard domains require DNS validation; this is _only_ supported for domains of which"
  echo "the DNS zone is hosted by Route53."
}

function setup() {
  echo "Creating directories..."
  mkdir -p $nginx_dir $le_dir
  if confirm "(Re)generate DH params?"; then
    openssl dhparam -out ${nginx_dir}/dhparams.pem 2048
  fi
  if confirm "Register new LetsEncrypt account?"; then
    certbot register ${staging} --agree-tos --no-eff-email -m $admin_email
  fi
}

function renew() {
  domain=$1
  cert_name=${domain/\*.}

  # Once the domain is routed to us, we want to switch to http-01
  if check_dns; then
    validation_options="--webroot --webroot-path $webroot"
  fi

  certbot renew ${staging} ${validation_options}\
    --cert-name ${cert_name} --post-hook="touch ${nginx_dir}/updated" --force-renewal
}

function renew_all() {
  certbot renew ${staging} --post-hook="touch ${nginx_dir}/updated"
}

function add() {
  domain=$1
  naked_domain=$( echo $domain | sed -E 's/^(www|\*)\.//g' )
  cert_name=${domain/\*.}
  config_file="${nginx_dir}/${cert_name}.conf"

  if [ ! -f $config_file ]; then
    request_certificate   || die "Request certificate failed"
    generate_nginx_config || die "Generating vhost config failed"
    validate_config       || die "Nginx config invalid" 9
    reload_config
  fi
}

function backup() {
  timestamp=$(date +%s)
  tar -czf /mnt/backups/nginx-${timestamp}.tar.gz $nginx_dir
  tar -czf /mnt/backups/letsencrypt-${timestamp}.tar.gz $le_dir
}

function clean() {
  # Remove expired certificates & config if dns no longer is valid
  for cert in $(expired_certificates); do
    if ! check_dns $cert; then
      delete $cert
    fi
  done

  # Clean up old backups after 30 days
  find /mnt/backups -mtime +30 -type f -name *.tar.gz -delete
}

function delete() {
  cert=$1
  certbot delete --cert-name $cert
  rm "${nginx_dir}/${cert}.conf"
}

function validate_config() {
  nginx -t -c /etc/nginx/nginx.test-conf
}

function reload_config() {
  touch ${nginx_dir}/updated
}

# internal functions
function expired_certificates() {
  certbot certificates | grep '(INVALID: EXPIRED)' -B2 | grep 'Certificate Name' | awk '{print $3}'
}

function check_dns() {
  result="$(dig +short $domain | egrep '^[0-9.]*$' | sort)"
  lb_ips="$(dig +short lb.bookingexperts.nl | sort)"

  if should_redirect; then
    [ "$result" = "$lb_ips" -o "$result" = $redirector_ip ] && [ "$(dig $naked_domain +short)" = $redirector_ip ]
  else
    [ "$result" = "$lb_ips" ] || [ "$(dig $domain +short)" = $redirector_ip ]
  fi
}

# Lookup for a hosted zone based on the domain name & recurse (shifting domain name parts) until found; then verify delegation
# verify it is delegated correctly by checking the expected & actual SOA record
function has_route53_zone() {
  local dns_name=$1
  if [ -n "${dns_name}" ]; then
      local zone_id=$(
        aws --output text route53 list-hosted-zones-by-name --dns-name=$dns_name --max-items=1 |
        egrep "/hostedzone/[A-Z0-9]+\t$dns_name" |
        awk '{print $3}'
      )
      if [ -z "${zone_id}" ]; then
        has_route53_zone $( echo $dns_name | sed -E 's/^[^.]+\.?//g' )
      else
        zone_delegated $dns_name $zone_id
      fi
  else
    false
  fi
}

function zone_delegated() {
  dig +nocmd +noall +answer $1 SOA | grep -q "$(aws route53 test-dns-answer --hosted-zone-id=$2 --record-name $1 --record-type SOA | jq -r '.RecordData[0]')"
}

function request_certificate() {
  # Prefer http-01 over route53, it is much quicker.
  if check_dns && ! is_wildcard; then
    validation_options="--webroot --webroot-path $webroot"
  elif has_route53_zone $domain; then
    validation_options="--dns-route53"
  else
    die "DNS checks failed & zone not hosted on Route53. Cannot request certificate." 12
  fi

  certbot certonly ${staging} ${validation_options} \
    --rsa-key-size 4096 --non-interactive --expand --keep-until-expiring \
    --cert-name ${cert_name} \
    $(domain_arguments $domain $naked_domain)
}

# Create vhost config for the domain & a www redirect if required
function generate_nginx_config() {
  eval "echo \"$(cat /etc/nginx/vhost.conf.template)\"" > $config_file
  if should_redirect; then
    eval "echo \"$(cat /etc/nginx/www-redir.conf.template)\"" >> $config_file
  fi
}

function is_wildcard() {
  echo $domain | egrep -q '^\*\.'
}

function should_redirect() {
  echo $domain | egrep -q '^www\.'
}

# Take any number of domains as arguments, outputs uniq domains prefix with -d fo use as cerbot add arguments
function domain_arguments() {
  args=( "$@" )
  printf "%s\n" "${args[@]}" | sort -u | awk '{print "-d "$0}'
}


function confirm() {
  echo -n "$@ "
  read answer
  for response in y Y yes YES Yes Sure sure SURE OK ok Ok
  do
    if [ "_$answer" == "_$response" ]
    then
      return 0
    fi
  done

  # Any answer other than the list above is considerred a "no" answer
  return 1
}

function die() {
  echo "ERROR: ${1}"
  if [ -n "$2" ]; then
    exitcode=$2
  else
    exitcode=1
  fi
  exit $exitcode
}

function is_tty() {
  tty > /dev/null && true
}

# Dry-run mode, just echo all the things!
if [ -n "${TEST}" ]; then
  function generate_nginx_config() {
    eval "echo \"$(cat /etc/nginx/vhost.conf.template)\""
    if should_redirect; then
      eval "echo \"$(cat /etc/nginx/www-redir.conf.template)\""
    fi
  }
  function touch() {
    echo "touch ${@}"
  }
  function nginx() {
    echo "nginx ${@}"
  }
  function tar() {
    echo "tar ${@}"
  }
  function rm() {
    echo "rm ${@}"
  }
  function certbot() {
    echo "certbot ${@}"
  }
fi

main "$@"
