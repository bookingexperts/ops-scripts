#!/bin/sh
admin_email='admin@bookingexperts.nl'
webroot='/usr/share/nginx/html'
nginx_dir=/mnt/nginx
le_dir=/mnt/letsencrypt
redirector_ip='52.58.34.119'

if [ ! -z ${STAGING} ]; then
  staging="--staging"
fi

function main() {
  case $1 in
    renew|'')
      renew
      ;;
    setup)
      setup
      ;;
    add)
      case $2 in
        \*.*)
          add_wildcard $2
          ;;
        *)
          add $2
          ;;
      esac
      ;;
    validate|validate-nginx)
      validate_config
      ;;
    reload|reload-nginx)
      validate_config && touch ${nginx_dir}/updated
      ;;
    clean|cleanup)
      clean
      ;;
    backup)
      backup
      ;;
    help|*)
      usage
      ;;
  esac
}

function usage() {
  echo "Usage: $0 [renew]           # Renew all certificates"
  echo "       $0 add domain        # Request a certificate for given domain and configure it"
  echo "       $0 validate[-nginx]  # Validate the nginx config"
  echo "       $0 reload[-nginx]    # Validate & reload the nginx config if valid"
  echo "       $0 clean[up]         # Remove expired certificates and backups older than 30 days"
  echo "       $0 backup            # Backup all configs & certificates"
  echo "       $0 setup             # Setup the LE account & generate DH params"
  echo ""
  echo "Note on wildcard domains:"
  echo "Wildcard domains require DNS validation; this is _only_ supported for domains of which"
  echo "the DNS zone is hosted by Route53."
}

function setup() {
  echo "Creating directories..."
  mkdir -p $nginx_dir $le_dir
  if confirm "(Re)generate DH params?"; then
    openssl dhparam -out ${nginx_dir}/dhparams.pem 2048
  fi
  if confirm "Register new LetsEncrypt account?"; then
    certbot register ${staging} --agree-tos --no-eff-email -m $admin_email
  fi
}

function renew() {
  certbot renew ${staging} --post-hook="touch ${nginx_dir}/updated"
}

function add() {
  domain=$1
  config_file="${nginx_dir}/${domain}.conf"

  if [ ! -f $config_file ]; then
    case $domain in
      www.*)
        naked_domain=$(echo $domain | sed -e 's/www\.//g')
        ;;
    esac

       check_dns $domain "${naked_domain}"                              || die "DNS check failed" 12 \
    && request_certificate $(strip_commas "${domain},${naked_domain}")  || die "Request certificate failed" \
    && generate_nginx_config $domain "${naked_domain}"                  || die "Generating vhost config failed" \
    && validate_config                                                  || die "Nginx config invalid" 9 \
    && touch ${nginx_dir}/updated
  fi
}

function add_wildcard() {
  domain=$1
  naked_domain=$(echo $domain | sed -e 's/*\.//g')
  config_file="${nginx_dir}/${domain}.conf"

  if ! is_tty || confirm "Request certificate for $domain and ${naked_domain}?"; then
    request_certificate "${domain},${naked_domain}" --dns
  fi

  if ! is_tty || confirm "Rewrite config?"; then
    domain=".${naked_domain}"
    name=$naked_domain
    eval "echo \"$(cat /etc/nginx/vhost.conf.template)\"" > "${nginx_dir}/${name}.conf"
    validate_config && touch ${nginx_dir}/updated
  fi
}

function backup() {
  timestamp=$(date +%s)
  tar -czf /mnt/backups/nginx-${timestamp}.tar.gz $nginx_dir
  tar -czf /mnt/backups/letsencrypt-${timestamp}.tar.gz $le_dir
}

function clean() {
  # Remove expired certificates & config if dns no longer is valid
  for cert in $(expired_certificates); do
    if ! check_dns $cert; then
      certbot delete --cert-name $cert
      rm "${nginx_dir}/${cert}.conf"
    fi
  done

  # Clean up old backups after 30 days
  find /mnt/backups -mtime +30 -type f -name *.tar.gz -delete
}


function validate_config() {
  nginx -t -c /etc/nginx/nginx.test-conf
}

# internal functions
function expired_certificates() {
  certbot certificates | grep '(INVALID: EXPIRED)' -B2 | grep 'Certificate Name' | awk '{print $3}'
}

function check_dns() {
  domain=$1
  naked=$2
  if [ -z $naked ]; then
    dig $domain +short | egrep -q '(lb|cms|lb\.cms|support)\.bookingexperts.nl' || [ "$(dig $domain +short)" = $redirector_ip ]
  else
    dig $domain +short | egrep -q '(lb|cms|lb\.cms|support)\.bookingexperts.nl' && [ "$(dig $naked  +short)" = $redirector_ip ]
  fi
}

function request_certificate() {
  if [ $2 == "--dns" ]; then
    validation_options="--dns-route53"
  else
    validation_options="--webroot --webroot-path $webroot"
  fi
  certbot certonly ${staging} ${validation_options} --rsa-key-size 4096 --non-interactive --expand --keep-until-expiring --domains $1
}

function generate_nginx_config() {
  domain=$1
  name=$domain
  naked_domain=$2
  config_file="${nginx_dir}/${domain}.conf"

  eval "echo \"$(cat /etc/nginx/vhost.conf.template)\"" > $config_file
  if [ "${naked_domain}" != '' ]; then
    eval "echo \"$(cat /etc/nginx/www-redir.conf.template)\"" >> $config_file
  fi
}

function confirm() {
  echo -n "$@ "
  read answer
  for response in y Y yes YES Yes Sure sure SURE OK ok Ok
  do
    if [ "_$answer" == "_$response" ]
    then
      return 0
    fi
  done

  # Any answer other than the list above is considerred a "no" answer
  return 1
}

strip_commas() {
 echo $1 | sed -e 's/^,*//g' | sed -e 's/,*$//g'
}

function die() {
  echo "ERROR: ${1}"
  if [ ! -z "$2" ]; then
    exitcode=$2
  else
    exitcode=1
  fi
  exit $exitcode
}

function is_tty() {
  tty > /dev/null && true
}

main "$@"
